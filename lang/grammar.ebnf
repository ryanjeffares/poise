program = { declaration } EOF ;

declaration = importDecl | funcDecl | varDecl | finalDecl | constDecl | structDecl | exportDecl | statement ;

importDecl = "import", NAMESPACE, ";" ;
funcDecl = "func", IDENTIFIER, "(", [ FUNCTION_ARGS ], ")", [ ":", TYPE_ANNOTATION ], BLOCK | ("=>", expression, ";") ;
varDecl = "var", IDENTIFIER, [ ":", TYPE_ANNOTATION ], [ { ",", IDENTIFIER, [ ":", TYPE_ANNOTATION ], } ], [ "=", [ "try" ], expression ], ";" ;
finalDecl = "final", IDENTIFIER, [ ":", TYPE_ANNOTATION ], [ { ",", IDENTIFIER, [ ":", TYPE_ANNOTATION ] } ], "=", [ "try" ], expression, ";" ;
constDecl = "const", IDENTIFIER, "=", constantExpression, ";" ;
structDecl = "struct", IDENTIFIER, "{", [ { MEMBER_VARIABLE } ], "}" ;
exportDecl = "export", ( funcDecl | constDecl | classDecl ) ;

statement = expressionStatement
    | printlnStatement
    | returnStatement
    | tryCatchStatement
    | throwStatement
    | whileStatement
    | forStatement
    | breakStatement
    | continueStatement ;

expressionStatement = call, [ { ",", call } ] [ "=", expression ], ";" ;
printlnStatement = "println", "(", expression, ")" ;
returnStatement = "return", [ expression ], ";" ;
tryCatchStatement = "try", "{", BLOCK, "}", "catch", [ IDENTIFIER ], BLOCK ;
ifStatement = "if", expression, BLOCK, [ { "else", "if", expression, BLOCK } ], [ "else", BLOCK ] ;
whileStatement = "while", expression, BLOCK ;
forStatement = "for", IDENTIFIER, [",", IDENTIFIER], "in", expression, BLOCK ;
breakStatement = "break", ";" ;
continueStatement = "continue", ";" ;

expression = [ "try" ], range | UNPACK ;
range = logicOr, [ "..", logicOr, [ "by", expression ] ] ;
logicOr = logicAnd, [ { "or", logicAnd } ] ;
logicAnd = bitwiseOr, [ { "and", bitwiseOr } ] ;
bitwiseOr = bitwiseXor, [ { "|", bitwiseXor } ] ;
bitwiseXor = bitwiseAnd, [ { "^", bitwiseAnd } ] ;
bitwiseAnd = equality, [ { "&", equality } ] ;
equality = comparison, [ { ( "!=" | "==" ), comparison } ] ;
comparison = shift, [ { ( ">" | ">=" | "<" | "<=" ), shift } ] ;
shift = term, [ { ( "<<" | ">>" ), term } ] ;
term = factor, [ { ( "-" | "+" ), factor } ] ;
factor = unary, [ { ( "/" | "*" ), unary } ] ;
unary = [ ( "!" | "-" | "~" ) ], ( unary | call ) ;
call = primary [ { ("(", [ CALL_ARGS ], ")") | (".", IDENTIFIER) | ("[", expression, "]") } ] ;
primary = BOOL | NUMBER | STRING | "(", expression, ")" | TYPE | TYPEOF | LAMBDA | CAST | LIST ;

constantExpression = constantLogicOr ;
constantLogicOr = constantLogicAnd, [ { "or", constantLogicAnd } ] ;
constantLogicAnd = constantBitwiseOr, [ { "and", constantBitwiseOr } ] ;
constantBitwiseOr = constantBitwiseXor, [ { "|", constantBitwiseXor } ] ;
constantBitwiseXor = constantBitwiseAnd, [ { "^", constantBitwiseAnd } ] ;
constantBitwiseAnd = constantEquality, [ { "&", constantEquality } ] ;
constantEquality = constantComparison, [ { ( "!=" | "==" ), constantComparison } ] ;
constantComparison = constantShift, [ { ( ">" | ">=" | "<" | "<=" ), constantShift } ] ;
constantShift = constantTerm, [ { ( "<<" | ">>" ), constantTerm } ] ;
constantTerm = constantFactor, [ { ( "-" | "+" ), constantFactor } ] ;
constantFactor = constantUnary, [ { ( "/" | "*" ), constantUnary } ] ;
constantUnary = [ ( "!" | "-" | "~" ) ], ( constantUnary | constantPrimary ) ;
constantPrimary = BOOL | NUMBER | STRING | "(", constantExpression, ")" | CAST | IDENTIFIER ;

BOOL = "false" | "true" ;
FLOAT = { DIGIT }, ".", { DIGIT } ;
INT = { DIGIT } ;
NONE = "None" ;
STRING = '"', [ { all characters } ], '"' ;
TYPE = "Bool", "Float", "Int", "None", "String", "Function", "Exception", "List", "Range" ;
TYPEOF = "typeof", "(", expression, ")" ;
LAMBDA = "|", [ CAPTURE_LIST ], "|", "(", [ FUNCTION_ARGS ], ")", [ ":", TYPE_ANNOTATION ], BLOCK | ("=>", expression | statement, ";") ;
CAST = TYPE, "(", CALL_ARGS, ")" ;
LIST = "[", CALL_ARGS, "]" ;
TUPLE = "(", { expression }, ")" ;
DICT = "{" [ { expression, expression } ], "}" ;

DIGIT = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 ;

CAPTURE_LIST = IDENTIFIER, [ { ",", IDENTIFIER } ], [ "," ] ;
CALL_ARGS = expression, [ { ",", expression } ], [ "," ] ;
FUNCTION_ARGS = [ "final" ], IDENTIFIER, [ ":", TYPE_ANNOTATION ], [ { ",", [ "final" ], IDENTIFIER, [ ":", TYPE_ANNOTATION ] } ], [ ",", PACK ], [ "," ] ;
BLOCK = "{", [ { declaration - funcDecl } ], "}" ;
PACK = IDENTIFIER, "..." ;
UNPACK = "...", IDENTIFIER ;
TYPE_ANNOTATION = TYPE, [ "[", TYPE, "]" ], [ "|", TYPE ] ;

NAMESPACE = (IDENTIFIER | ".."), [ { "::", (IDENTIFIER | "..") } ], [ ("as", IDENTIFIER) | ("::", "*") ] ;

MEMBER_VARIABLE = IDENTIFIER, [ TYPE_ANNOTATION ], ";" ;
