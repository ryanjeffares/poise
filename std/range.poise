import std::list;

export func is_infinite_loop(this final Range range): Bool => __NATIVE_RANGE_IS_INFINITE_LOOP(range);
export func start(this final Range range): Int => __NATIVE_RANGE_START(range);
export func end(this final Range range): Int => __NATIVE_RANGE_END(range);
export func increment(this final Range range): Int => __NATIVE_RANGE_INCREMENT(range);
export func inclusive(this final Range range): Int => __NATIVE_RANGE_INCLUSIVE(range);

export func contains(this final Range range, final value): Bool {
    if range.is_infinite_loop() {
        return false;
    }

    if value < range.start() {
        return false;
    }

    final inclusive: Bool = range.inclusive();
    if (inclusive and value > range.start()) or (!inclusive and value >= range.end()) {
        return false;
    }

    return value % range.increment() == 0;
}

