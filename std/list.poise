export func empty(this final List list) => __NATIVE_LIST_EMPTY(list);
export func size(this final List list) => __NATIVE_LIST_SIZE(list);
export func append(this final List list, final value) => __NATIVE_LIST_APPEND(list, value);
export func clear(this final List list) => __NATIVE_LIST_CLEAR(list);

// returns true if insertion happened, false if index was out of range
export func insert(this final List list, final index, final value) => __NATIVE_LIST_INSERT(list, index, value);

// returns count of matching values removed
export func remove(this final List list, final value) => __NATIVE_LIST_REMOVE(list, value);

// returns true if removal happened, false if not
export func remove_first(this final List list, final value) => __NATIVE_LIST_REMOVE_FIRST(list, value);

// returns true if removal happened, false if no match was found or index out of range
export func remove_at(this final List list, final index) => __NATIVE_LIST_REMOVE_AT(list, index);

export func where(this final List list, final predicate) {
    final res = [];

    for item in list {
        if predicate(item) {
            res.append(item);
        }
    }

    return res;
}

export func map(this final List list, final fn) {
    final res = [];

    for item in list {
        res.append(fn(item));
    }

    return res;
}

export func for_each(this final List list, final fn) {
    for item in list {
        fn(item);
    }
}

export func contains(this final List list, final value) {
    for item in list {
        if item == value {
            return true;
        }
    }

    return false;
}
